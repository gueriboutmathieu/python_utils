from _typeshed import Incomplete
from fastapi import Depends as Depends
from typing import Annotated, Any

oauth2_scheme: Incomplete

class AuthException(Exception):
    message: Incomplete
    def __init__(self, message: str = 'Auth exception') -> None: ...

class Auth:
    secret_key: Incomplete
    public_key: Incomplete
    algorithm: str
    token_data_keys: Incomplete
    access_token_expire_seconds: Incomplete
    refresh_token_expire_days: Incomplete
    def __init__(self, secret_key: str, public_key: str, token_data_keys: list[str] = ['username'], access_token_expire_seconds: int = 86400, refresh_token_expire_days: int = 30) -> None: ...
    def validate_public_key(self, public_key: str) -> None: ...
    def create_access_token(self, token_data: dict[str, Any]) -> str: ...
    def create_refresh_token(self, token_data: dict[str, Any]) -> str: ...
    def validate_token(self, token: str) -> None: ...
    def refresh_access_token(self, refresh_token: str) -> str: ...
    async def get_current_user(self, token: Annotated[str, None]) -> str: ...
