name: ðŸ§© Validate alembic migrations

on:
  workflow_call:
    inputs:
      sql_user:
        description: "Database user"
        type: string
        required: false
        default: "user"
      sql_password:
        description: "Database password"
        type: string
        required: false
        default: "password"
      sql_host:
        description: "Database host"
        type: string
        required: false
        default: "localhost"
      sql_port:
        description: "Database port"
        type: string
        required: false
        default: "5432"
      sql_database:
        description: "Database name"
        type: string
        required: false
        default: "test_db"
      root_directory:
        description: "The root path from where this action will be executed, aka the root path of the app"
        type: string
        required: false
        default: "."
      docker_image:
        description: "The Docker image to use for the database"
        type: string
        required: false
        default: "postgres"
      env-vars:
        description: "Additional environment variables to set"
        type: string
        required: false
        default: '{}'

jobs:
  check-alembic-migrations:
    runs-on: ubuntu-latest

    env:
      SQL_USER: ${{ inputs.sql_user }}
      SQL_PASSWORD: ${{ inputs.sql_password }}
      SQL_HOST: ${{ inputs.sql_host }}
      SQL_PORT: ${{ inputs.sql_port }}
      SQL_DATABASE: ${{ inputs.sql_database }}

    steps:
      - name: Setup env vars
        run: |
          ENV_VARS=$(echo '${{ inputs.env-vars }}' | jq -r 'to_entries | map("\(.key)=\(.value)") | .[]')
          for ENV_VAR in $ENV_VARS; do
            echo "$ENV_VAR" >> $GITHUB_ENV
          done

      - name: Start PostgreSQL service
        run: |
          docker run --name postgres -e POSTGRES_USER=${{ inputs.sql_user }} \
            -e POSTGRES_PASSWORD=${{ inputs.sql_password }} \
            -e POSTGRES_DB=${{ inputs.sql_database }} \
            -d -p ${{ inputs.sql_port }}:5432 ${{ inputs.docker_image }}

      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec postgres pg_isready -U ${{ inputs.sql_user }} -h ${{ inputs.sql_host }} -p ${{ inputs.sql_port }}; do sleep 1; done

      - uses: actions/checkout@v4

      - name: Install and setup uv
        run: |
          echo "Installing uv"
          sudo apt-get update
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv python install ${{ inputs.python-version }}

      - name: Install dependencies
        working-directory: .
        run: |
          uv venv
          uv sync

      - name: Run Alembic upgrade
        working-directory: ${{ inputs.root_directory }}
        run: uv run alembic upgrade head

      - name: Check for migration differences
        working-directory: ${{ inputs.root_directory }}
        run: uv run alembic check

      - name: Run Alembic downgrade
        working-directory: ${{ inputs.root_directory }}
        run: uv run alembic downgrade base
